// 1 ðŸš€ FaÃ§a as modificaÃ§Ãµes necessÃ¡rias na funÃ§Ã£o para que o seu comportamento respeite o escopo no qual cada variÃ¡vel foi declarada.
// Modifique a estrutura da funÃ§Ã£o para que ela seja uma arrow function.
// Modifique as concatenaÃ§Ãµes para template literals.
// Copie o cÃ³digo abaixo.

// function testingScope(escopo) {
//   if (escopo === true) {
//     var ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
//     ifScope = ifScope + ' Ã³timo, fui utilizada no escopo !';
//     console.log(ifScope);
//   } else {
//     var elseScope = 'NÃ£o devo ser utilizada fora meu escopo (else)';
//     console.log(elseScope);
//   }
//   console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necessÃ¡rio esta linha pode ser removida.
// }

// testingScope(true);

const testingScope = (escopo) => {

  var ifScope = 'NÃ£o devo ser ultilizada forado meu escopo (if)'
  var elseScope = 'NÃ£o devo ser utilizada fora meu escopo (else)'

  return escopo === true ? ifScope = `Ã³timo, fui ultilizada no escopo ! ` : elseScope

};

console.log(testingScope(true));
console.log(testingScope(false));

//===============================================================================================================

// 2 ðŸš€ Copie o cÃ³digo abaixo e faÃ§a uma funÃ§Ã£o que retorne o array oddsAndEvens em ordem crescente.
// Utilize template literals para que a chamada console.log(<seu cÃ³digo>oddsAndEvens<seu cÃ³digo>); retorne "Os nÃºmeros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// BÃ´nus (opcional): tente fazer o mesmo exercÃ­cio utilizando o mÃ©todoarray.sort(). Spoiler: Ã‰ possÃ­vel realizar uma funÃ§Ã£o que ordene qualquer array de nÃºmeros.
// Copie o cÃ³digo abaixo.

const oddsAndEvens = [13, 3, 4, 10, 7, 2];
const arrOrdenator = (array) => array.sort((a, b) => a - b); // esta funÃ§Ã£o ordena qualquer array de numeros passado

arrOrdenator(oddsAndEvens)

//===============================================================================================================

// Parte II
// Abaixo, vocÃª verÃ¡ algumas especificaÃ§Ãµes de algoritmos para desenvolver. Ã‰ fundamental que vocÃª utilize o que aprendeu sobre let, const, arrow functions, template literals e ternary operator.
// Crie uma funÃ§Ã£o que receba um nÃºmero e retorne seu fatorial.
// Na matemÃ¡tica, o fatorial de um nÃºmero nÃ£o negativo N, com a notaÃ§Ã£o N!, Ã© o produto de todos os inteiros menores ou iguais a N. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.


const calcFactorial = (number) => number === 0 || number === 1 ? 1 : number * calcFactorial(number - 1)

// console.log(calcFactorial(4));


//===============================================================================================================

// Crie uma funÃ§Ã£o que receba uma frase e retorne a maior palavra.
// Exemplo:
// Copiar
//       longestWord('AntÃ´nio foi no banheiro e nÃ£o sabemos o que aconteceu') // retorna 'aconteceu'


const frase = 'Criando uma funÃ§Ã£o para encontrar a maior palavra nesta frase, adicionando algumas palavras a mais somente para testes!'

const findBiggestWord = (str) => {
  let biggest = 0;
  let word = null;
  const arrOfStrings = str.split(' ');

  arrOfStrings.forEach(str => {
    if (biggest < str.length) {
      biggest = str.length;
      word = str;
    }

  })
  return word;
};

console.log(findBiggestWord(frase))

//==========================================================================================
// ðŸš€ Crie uma pÃ¡gina com um contador de cliques
// Sua pÃ¡gina deve conter:
// Um botÃ£o ao qual serÃ¡ associado um event listener;
// Uma variÃ¡vel clickCount no arquivo JavaScript que acumule o nÃºmero de clicks no botÃ£o;
// Um campo no HTML que vÃ¡ atualizando a quantidade de clicks no botÃ£o conforme a variÃ¡vel clickCount Ã© atualizada.




// const body = document.querySelector('body');
// const showClicks = document.createElement('p');
// body.appendChild(showClicks);
// let clickCount = 0;
// const btn = document.querySelector('button');


// btn.addEventListener('click', () => {

//   clickCount+=1
//  clickCount === 1 ? showClicks.innerHTML = `Fui clicado: ${clickCount} vez!`
//                  :  showClicks.innerHTML = `Fui clicado: ${clickCount} vezes!` 
// });

//==========================================================================================
// ðŸš€ Crie duas funÃ§Ãµes JavaScript com as seguintes especificaÃ§Ãµes:
// NÃ£o se esqueÃ§a de usar template literals
// FunÃ§Ã£o 1: Escreva uma funÃ§Ã£o que substitua a letra 'x' em uma frase.
// A funÃ§Ã£o deverÃ¡ receber um nome por parÃ¢metro;
// Declare dentro da funÃ§Ã£o uma variÃ¡vel com o nome frase, do tipo const e com o valor igual a 'Tryber x aqui!';
// A funÃ§Ã£o deverÃ¡ retornar uma nova frase onde o x da frase 'Tryber x aqui!' seja substituÃ­do pelo nome passado por parÃ¢metro.
// Exemplo:
// ParÃ¢metro: 'Bebeto'
// Retorno: 'Tryber Bebeto aqui!'
// FunÃ§Ã£o 2: Escreva uma funÃ§Ã£o que irÃ¡ receber o retorno da FunÃ§Ã£o 1 por parÃ¢metro e retornarÃ¡ uma nova string.
// A funÃ§Ã£o deverÃ¡ receber o retorno da FunÃ§Ã£o 1 por parÃ¢metro;
// Declare dentro da funÃ§Ã£o uma variÃ¡vel com o nome skills, do tipo const;
// A variÃ¡vel skills deverÃ¡ ser um array contendo trÃªs strings com tecnologias que vocÃª jÃ¡ aprendeu.
// Concatene o valor retornado da FunÃ§Ã£o 1, a frase 'Minhas trÃªs principais habilidades sÃ£o:' e o valor da variÃ¡vel skills.
// Exemplo de retorno:
// Tryber Bebeto aqui!
// Minhas trÃªs principais habilidades sÃ£o:
// JavaScript
// HTML
// CSS

const removeX = (name) => {
  const frase = 'Tryber x aqui!';
  const replaceX = frase.replace('x', name);
  return replaceX;
};

removeX('Roberto');

  const habilities = () => {
   const skills = ['html', 'css', 'JavaScript'];

  return `${removeX('Roberto')}!! Minhas trÃªs principais habilidades sÃ£o: ${skills.join(', ')}`

};

console.log(habilities())